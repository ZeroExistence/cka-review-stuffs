apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx01
  name: nginx01
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx01
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx01
    spec:
      containers:
      - image: nginx:1.188
        name: nginx
        resources: {}
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx02
  name: nginx02
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx02
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx02
    spec:
      containers:
      - image: nginx:1.18
        name: nginx
        resources:
          requests:
            memory: "8Gi"
            cpu: "250m"
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx03
  name: nginx03
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx03
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx03
    spec:
      containers:
      - image: nginx:1.18
        name: nginx
        resources:
          requests:
            memory: "100Mi"
            cpu: "4"
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx04
  name: nginx04
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx04
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx04
    spec:
      containers:
      - image: nginx:1.18
        name: nginx
        resources: {}
        volumeMounts:
        - name: share2-persistent-vol
          mountPath: /input
      volumes:
      - name: share2-persistent-vol
        persistentVolumeClaim:
          claimName: share22
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: echo-cluster-service
  name: echo-cluster-service
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: echo-cluster-services
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: echo-cluster-service
  name: echo-cluster-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: echo-cluster-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: echo-cluster-service
    spec:
      containers:
      - image: k8s.gcr.io/echoserver:1.10
        name: echoserver
        ports:
        - containerPort: 8080
        resources: {}
status: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: python-demo
data:
  app.py: |
    import http.server
    import socketserver
    PORT = 8000
    Handler = httpd.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("serving at port", PORT)
        httpd.serve_forever()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: python-app
  name: python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: python-app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: python-app
    spec:
      containers:
      - image: python:rc-alpine
        name: python
        resources: {}
        command:
        - python
        - /app/app.py
        volumeMounts:
        - name: python-demo
          mountPath: "/app"
          readOnly: false
      volumes:
      - name: python-demo
        configMap:
          name: python-demo
status: {}
